esphome:
  name: Geigerteller

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryptiongeigerteller

ota:
  password: "44f6ac6b430e766aa14c844fbd912d6b"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Nuclear Fallback Hotspot"
    password: "z1Hx5mBQ4bMV"

captive_portal:

deep_sleep:
  run_duration: 5min
  wakeup_pin:
    number: 39
    inverted: true
  wakeup_pin_mode: INVERT_WAKEUP

debug:
  update_interval: 10s
  
sensor:
  - platform: pulse_counter
    pin: 34
    unit_of_measurement: "CPS"
    name: "Ionizing Radiation Counts Per Second"
    id: counter_cps
    update_interval: 1s
    filters:
      - multiply: 0.0166666 
    total:
      id: counter_total
    on_value:
      - sensor.template.publish:
          id: counter_cpm
          state: !lambda "return x * 60;"
      - sensor.template.publish:
          id: counter_cpm_average
          state: !lambda "return x * 60;"

  - platform: template
    name: "Ionizing Radiation Counts Per Minute"
    id: "counter_cpm"
    unit_of_measurement: "CPM" 

  - platform: template
    name: "Average Ionizing Radiation Counts Per Minute"
    id: "counter_cpm_average"
    unit_of_measurement: "CPM"
    filters:
      - sliding_window_moving_average:
          window_size: 60
          send_every: 5
  - platform: template
    name: "Battery Percentage"
    id: "battery_percentage"
    unit_of_measurement: "%"
    update_interval: 60s
    lambda: |-
      return ((id(battery_level).state-3) /1.2 * 100.00);
    
  - platform: adc
    pin: 35
    id: battery_level
    update_interval: 60s
    attenuation: auto
    filters:
      - multiply: 2
  - platform: uptime
    name: Uptime Sensor
    id: uptime_esp
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP-adress
      id: logip
    ssid:
      name: ESP Connected SSID
      id: logssid
    mac_address:
      name: ESP Mac Wifi Address
      id: logmac
  
  - platform: debug
    device:
      name: "Device Info"
      id: logdebug

binary_sensor:
  - platform: gpio
    name: "Page 1"
    pin:
      number: 37
    on_press:
      then:
        - display.page.show_next: my_display

  - platform: gpio
    name: "Page 2"
    pin:
      number: 38
    on_press:
      then:
        - display.page.show_previous: my_display

  - platform: gpio
    name: "Deep sleep button"
    pin:
      number: 39
    on_press:
      then:
        - deep_sleep.enter
font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto10
    size: 10
  - file: "gfonts://Roboto"
    id: roboto25
    size: 25
  - file: "gfonts://Roboto"
    id: roboto30
    size: 30
  - file: "gfonts://Roboto"
    id: roboto36
    size: 36
  - file: "gfonts://Roboto"
    id: roboto40
    size: 40

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 12

display:
  - platform: ili9341
    model: TFT 2.4
    id: my_display
    cs_pin: 27
    dc_pin: 32
    led_pin: 4 ### see note below ###
    reset_pin: 5
    rotation: 90
    pages:
      - id: page1
        lambda: |-
          it.image(5, 0, id(my_animation));
          it.print(50, 0, id(roboto30), my_yellow, "Geiger-Mullerteller");
          it.printf(5, 50, id(roboto36), "%03.0f", id(counter_cpm_average).state);
          it.print(7, 83, id(roboto25), my_light_blue, "CPM");
          it.printf(5, 150, id(roboto36), "%03.0f", id(counter_cps).state);
          it.print(8, 183, id(roboto25), red, "CPS");
          it.graph(80, 40, id(cpm_graph), my_light_blue);
          it.print(80,120, id(roboto10), my_light_blue, "0               1                 2                 3    (tijd in minuten) " );
          it.graph(80, 135, id(cps_graph), red);
          it.print(80,215, id(roboto10), red, "0           10           20           30        (tijd in seconden) " );
      - id: page2
        lambda: |-
          it.image(5, 0, id(my_animation));
          it.print(50, 0, id(roboto30), my_yellow, "Data Overzicht");
          it.printf(5, 50, id(roboto36), "%03.0f", id(counter_cps).state);
          it.print(7, 83, id(roboto25), my_light_blue, "CPS");
          it.printf(85, 50, id(roboto36), "%03.0f", id(counter_cpm_average).state);
          it.print(87, 83, id(roboto25), red, "CPM");
          it.printf(165, 50, id(roboto36), "%0.0f", id(battery_percentage).state); 
          it.print(167, 83, id(roboto25), my_purple, "Accu");
          it.printf(245, 50, id(roboto36), "%01.2f", id(battery_level).state ); 
          it.print(247, 83, id(roboto25), my_yellow, "Volt");
          it.printf(5, 153, id(roboto36), "%05.0f", id(counter_total).state);
          it.print(18, 185, id(roboto25), my_green, "Totaal");
          it.graph(120, 135, id(total_graph), my_green);
          it.print(120,215, id(roboto10), my_green, "0               1                 2                 3  (tijd in minuten)" );
      - id: page3
        lambda: |-
          it.print(55, 0, id(roboto30), my_yellow, "Github QR-code");
          it.qr_code(80, 40, id(github), Color(255,255,255), 4);
qr_code:
  - id: github
    value: https://github.com/beefsaus/Geigermullerteller
    ecc: high

animation:
  - file: "Radioactive.png"
    id: my_animation
    resize: 35x35
    type: RGB24

color:
  - id: my_light_blue
    red: 25%
    green: 20%
    blue: 100%
    white: 0%

  - id: red
    red: 100%
    green: 0%
    blue: 0%

  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
    
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_purple
    red: 100%
    green: 0%
    blue: 100%

graph:
  # Show bare-minimum auto-ranged graph
  - id: cps_graph
    duration: 1min
    x_grid: 10s
    y_grid: 10
    width: 200.0
    height: 80
    traces:
      - sensor: counter_cps
        line_type: SOLID
        line_thickness: 2
  - id: cpm_graph
    duration: 5min
    x_grid: 60s
    y_grid: 10
    width: 200
    height: 80
    traces:
      - sensor: counter_cpm_average
        line_type: SOLID
        line_thickness: 2
  - id: total_graph
    duration: 5min
    x_grid: 1min
    y_grid: 10
    width: 200
    height: 80
    traces:
      - sensor: counter_total
        line_type: SOLID
        line_thickness: 2
