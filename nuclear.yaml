esphome:
  name: nuclear

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "MpKke9/YDOnrgDYMoafoQxPlNhZxCkVhAYbbZdhT2XA="

ota:
  password: "44f6ac6b430e766aa14c844fbd912d6b"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Nuclear Fallback Hotspot"
    password: "z1Hx5mBQ4bMV"

captive_portal:

sensor:
  - platform: pulse_counter
    pin: 19
    unit_of_measurement: "mkSv/Hour"
    name: "Ionizing Radiation Power"
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    update_interval: 60s
    accuracy_decimals: 3
    id: my_dose_meter
    filters:
      - sliding_window_moving_average: # 5-minutes moving average (MA5) here
          window_size: 5
          send_every: 5
      - multiply: 0.0057 # SBM20 tube conversion factor of pulses into mkSv/Hour

  - platform: integration
    name: "Total Ionizing Radiation Dose"
    unit_of_measurement: "mkSv"
    sensor: my_dose_meter # link entity id to the pulse_counter values above
    id: my_dose_meter_mkSv
    icon: "mdi:radioactive"
    accuracy_decimals: 5
    time_unit: min # integrate values every next minute
    filters:
      # obtained dose. Converting from mkSv/hour into mkSv/minute: [mkSv/h / 60] OR [mkSv/h * 0.0166666667].
      # if my_dose_meter in CPM, then [0.0054 / 60 minutes] = 0.00009; so CPM * 0.00009 = dose every next minute, mkSv.
      - multiply: 0.0166666667

binary_sensor:
  - platform: gpio
    name: "Page 1"
    pin:
      number: 38
    on_press:
      then:
        - display.page.show: page1

  - platform: gpio
    name: "Page 2"
    pin:
      number: 37
    on_press:
      then:
        - display.page.show: page2

font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto25
    size: 25
  - file: "gfonts://Roboto"
    id: roboto50
    size: 40

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 12

display:
  - platform: ili9341
    model: TFT 2.4
    cs_pin: 27
    dc_pin: 32
    led_pin: 4 ### see note below ###
    reset_pin: 5
    rotation: 270
    pages:
      - id: page1
        lambda: |-
          id(my_animation).next_frame();
          it.image(20, 10, id(my_animation));
          it.print(100, 10, id(roboto50), my_yellow, "Radiation");
          it.print(100, 120, id(roboto25), TextAlign::BASELINE_RIGHT, "mkSv/H");
          it.print(100, 200, id(roboto25), TextAlign::BASELINE_RIGHT, "mkSv");
          it.graph(115, 70, id(mkSv_Hour_graph), my_light_blue);
          it.graph(115, 155, id(mkSv_graph), my_yellow);
      - id: page2
        lambda: |-
          it.print(20, 100, id(roboto25), "Hello World!");

animation:
  - file: "radio.gif"
    id: my_animation
    resize: 50x50
    type: RGB24

color:
  - id: my_light_red
    red: 100%
    green: 20%
    blue: 25%
    white: 0%

  - id: my_light_blue
    red: 25%
    green: 20%
    blue: 100%
    white: 0%

  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%

graph:
  # Show bare-minimum auto-ranged graph
  - id: mkSv_Hour_graph
    sensor: my_dose_meter
    duration: 1h
    width: 200
    height: 80
  - id: mkSv_graph
    sensor: my_dose_meter_mkSv
    duration: 1h
    width: 200
    height: 80
